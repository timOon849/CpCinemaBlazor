@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Services
@using CpCinemaBlazor.ApiRequest.Model
@using Microsoft.AspNetCore.Authentication
@using CpCinemaBlazor.ApiRequest
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

@inject SingletoneUser SingletoneUser
@inject IToastService ToastService
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    .form-floating input {
        height: 48px;
        font-size: 16px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .text-danger {
        color: red;
    }
</style>
<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@Input" OnValidSubmit="AuthBtn" FormName="LoginForm">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label for="email" class="form-label">Почта</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        // Подписываемся на событие изменения состояния аутентификации
        SingletoneUser.OnAuthStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        // Отписываемся от события при уничтожении компонента
        SingletoneUser.OnAuthStateChanged -= StateHasChanged;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    private InputModel Input { get; set; } = new();

    public async Task AuthBtn()
    {
        try
        {
            // Имитация проверки данных пользователя
            if (Input.Email == "test@example.com" && Input.Password == "password")
            {
                var token = "your_jwt_token_here"; // Замените на реальный токен

                if (!string.IsNullOrEmpty(token))
                {
                    Navigation.NavigateTo("/profile");

                    var principal = JwtService.DecodeJwtToken(token);
                    int Id = Convert.ToInt32(principal.FindFirst("id_User")?.Value);
                    string NameT = principal.FindFirst("Name")?.Value ?? "Неизвестный";
                    string About = principal.FindFirst("AboutMe")?.Value ?? "Нет информации";
                    bool Admin = Convert.ToBoolean(principal.FindFirst("isAdmin")?.Value);

                    // Авторизация пользователя через SingletoneUser
                    await SingletoneUser.Login(new CurUser
                        {
                            id_User = Id,
                            AboutMe = About,
                            Name = NameT,
                            isAdmin = Admin,
                            Token = token
                        });

                    ToastService.ShowSuccess("Авторизация прошла успешно!");
                }
                else
                {
                    ToastService.ShowError("Авторизация не пройдена! Логин или пароль неверные.");
                }
            }
            else
            {
                ToastService.ShowError("Неверный email или пароль.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при авторизации пользователя.");
            ToastService.ShowError($"Ошибка авторизации: {ex.Message}");
        }
    }

    public class JwtService
    {
        public static ClaimsPrincipal DecodeJwtToken(string token)
        {
            var handler = new JwtSecurityTokenHandler();

            if (handler.CanReadToken(token))
            {
                var jwtToken = handler.ReadJwtToken(token);
                var claims = jwtToken.Claims;
                var identity = new ClaimsIdentity(claims, "jwt");
                return new ClaimsPrincipal(identity);
            }

            throw new Exception("Invalid JWT token");
        }
    }
}