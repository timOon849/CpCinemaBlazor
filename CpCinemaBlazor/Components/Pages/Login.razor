@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Services
@using CpCinemaBlazor.ApiRequest.Model
@using Microsoft.AspNetCore.Authentication
@using CpCinemaBlazor.ApiRequest
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using static CpCinemaBlazor.ApiRequest.Model.User

@inject SingletoneUser SingletoneUser
@inject IToastService ToastService
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    .form-floating input {
    height: 48px;
    font-size: 16px;
    }

    .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
    }

    .btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
    }

    .text-danger {
    color: red;
    }
</style>
<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@Input" OnValidSubmit="AuthBtn" FormName="LoginForm">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label for="email" class="form-label">Почта</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" />
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    AuthUser user = new AuthUser();
    [Inject] private ApiRequestService ApiRequest { get; set; }

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
    async Task AuthBtn()
    {
        try
        {
            user.Email = Input.Email;
            user.Password = Input.Password;

            var token = await ApiRequest.AuthorizationAsync(user);

            if (!string.IsNullOrEmpty(token))
            {
                var principal = JwtService.DecodeJwtToken(token);

                int Id = Convert.ToInt32(principal.FindFirst("id_User")?.Value);
                string NameT = principal.FindFirst("Name")?.Value;
                string About = principal.FindFirst("AboutMe")?.Value;
                bool Admin = Convert.ToBoolean(principal.FindFirst("isAdmin")?.Value);

                // Создаем объект CurUser
                var currentUser = new CurUser
                    {
                        id_User = Id,
                        AboutMe = About,
                        Name = NameT,
                        isAdmin = Admin,
                        Token = token
                    };

                // Сохраняем пользователя через SingletoneUser
                await SingletoneUser.Login(currentUser);

                Navigation.NavigateTo("/counter");
            }
            else
            {
                errorMessage = "Authorization failed: No token received";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Authorization failed: {ex.Message}";
        }
    }

    public class JwtService
    {
        public static ClaimsPrincipal DecodeJwtToken(string token)
        {
            var handler = new JwtSecurityTokenHandler();

            // Проверяем, является ли токен валидным JWT
            if (handler.CanReadToken(token))
            {
                // Декодируем токен
                var jwtToken = handler.ReadJwtToken(token);

                // Извлекаем claims (данные) из токена
                var claims = jwtToken.Claims;

                // Создаем ClaimsPrincipal для работы с данными
                var identity = new ClaimsIdentity(claims, "jwt");
                var principal = new ClaimsPrincipal(identity);

                return principal;
            }

            throw new Exception("Invalid JWT token");
        }
    }
}