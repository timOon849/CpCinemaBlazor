@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Blazored.Toast.Services
@using CpCinemaBlazor.ApiRequest.Model
@using Microsoft.AspNetCore.Authentication
@using CpCinemaBlazor.Data
@using CpCinemaBlazor.ApiRequest
@using static CpCinemaBlazor.ApiRequest.Model.User
@using System
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Timers


@inject SingletoneUser SingletoneUser
@inject IToastService ToastService
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="@Input" OnValidSubmit="AuthBtn" FormName="LoginForm">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <label for="email" class="form-label">Почта</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true"/>
                    <label for="password" class="form-label">Пароль</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        SingletoneUser.OnAuthStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        SingletoneUser.OnAuthStateChanged -= StateHasChanged;
    }
    private List<NotificationService.NotificationModel> Notifications = new List<NotificationService.NotificationModel>();

    AuthUser user = new AuthUser();
    [Inject] private ApiRequestService ApiRequest { get; set; }

    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    public async Task AuthBtn()
    {
        try
        {
            user.Email = Input.Email;
            user.Password = Input.Password;
            var token = await ApiRequest.AuthorizationAsync(user);

            if (!string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/profile");

                var principal = JwtService.DecodeJwtToken(token);
                int Id = Convert.ToInt32(principal.FindFirst("id_User")?.Value);
                string NameT = principal.FindFirst("Name")?.Value ?? "Неизвестный";
                string About = principal.FindFirst("AboutMe")?.Value ?? "Нет информации";
                bool Admin = Convert.ToBoolean(principal.FindFirst("isAdmin")?.Value);

                SingletoneUser.Login(new CurUser
                    {
                        id_User = Id,
                        AboutMe = About,
                        Name = NameT,
                        isAdmin = Admin,
                        Token = token // Сохраняем токен
                    });

                ToastService.ShowSuccess("Авторизация прошла успешно!");
                NotificationService.ShowSuccess("Авторизация прошла успешно!");
            }
            else
            {
                errorMessage = "Authorization failed: No token received";
                ToastService.ShowError("Авторизация не пройдена! Логин или пароль неверные");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при авторизации пользователя.");
            errorMessage = $"Authorization failed: {ex.Message}";
            ToastService.ShowError($"Авторизация не пройдена! Детали ошибки: {ex.Message}");
        }
    }
    private void Login()
    {
        try
        {
            if (SingletoneUser == null)
            {
                throw new InvalidOperationException("SingletoneUser не был внедрен.");
            }

            var user = new CurUser
                {
                    id_User = 1,
                    Name = "Иван Иванов",
                    Token = "your_jwt_token_here", // Замените на реальный токен
                    AboutMe = "Тестовый пользователь",
                    isAdmin = false
                };

            SingletoneUser.Login(user);

            Console.WriteLine("Пользователь успешно авторизован.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ошибка при вызове метода Login.");
            ToastService.ShowError($"Ошибка: {ex.Message}");
        }
    }

    private async void HandleNotificationAdded(NotificationService.NotificationModel notification)
    {
        Notifications.Add(notification);
        StateHasChanged();

        await Task.Delay(5000); // Задержка в 5 секунд

        InvokeAsync(() =>
        {
            RemoveNotification(notification.Id);
            StateHasChanged();
        });
    }

    private void RemoveNotification(Guid id)
    {
        var notification = Notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            Notifications.Remove(notification);
        }
    }

    public class JwtService
    {
        public static ClaimsPrincipal DecodeJwtToken(string token)
        {
            var handler = new JwtSecurityTokenHandler();

            // Проверяем, является ли токен валидным JWT
            if (handler.CanReadToken(token))
            {
                // Декодируем токен
                var jwtToken = handler.ReadJwtToken(token);

                // Извлекаем claims (данные) из токена
                var claims = jwtToken.Claims;

                // Создаем ClaimsPrincipal для работы с данными
                var identity = new ClaimsIdentity(claims, "jwt");
                var principal = new ClaimsPrincipal(identity);

                return principal;
            }

            throw new Exception("Invalid JWT token");
        }
    }
}
