@page "/profile"
@using Blazored.Toast.Services
@using CpCinemaBlazor.ApiRequest.Model

@inject SingletoneUser SingletoneUser
@inject NavigationManager Navigation
@inject IToastService ToastService
@rendermode InteractiveServer

<h2 class="profile-title">Профиль пользователя</h2>
<style>
    .profile-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 20px;
    }

    .profile-avatar img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
    }

    .profile-info {
        text-align: center;
        margin: 20px 0;
    }

    .profile-actions button {
        margin: 5px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-edit {
        background-color: #28a745;
        color: white;
    }

    .btn-logout {
        background-color: #dc3545;
        color: white;
    }
</style>
@if (SingletoneUser.IsAuthenticated)
{
    <div class="profile-container">
        <div class="profile-avatar">
            <img src="/Components/Images/avatar.png" alt="Аватар пользователя" class="avatar-image" width="100" height="100" />
        </div>

        <div class="profile-info">
            <p><strong>Имя:</strong> @SingletoneUser.CurrentUser.Name</p>
            <p><strong>Описание:</strong> @SingletoneUser.CurrentUser.AboutMe</p>
            <p><strong>Токен:</strong> @(string.IsNullOrEmpty(SingletoneUser.CurrentUser.Token) ? "Не авторизован" : "Авторизован")</p>
        </div>

        <div class="profile-actions">
            <button class="btn btn-edit" @onclick="EditProfile">Редактировать профиль</button>
            <button class="btn btn-logout" @onclick="Logout">Выйти</button>
        </div>
    </div>
}
else
{
    <p>Вы не авторизованы. Пожалуйста, <a href="/Account/Login">войдите</a>.</p>
}

@code {
    private string AvatarUrl = "https://via.placeholder.com/150";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SingletoneUser.LoadUserFromStorage();
            StateHasChanged(); // Обновляем интерфейс после загрузки данных
        }
    }

    public void Dispose()
    {
        // Отписываемся от события при уничтожении компонента
        SingletoneUser.OnAuthStateChanged -= StateHasChanged;
    }

    private void EditProfile()
    {
        Navigation.NavigateTo("/edit-profile");
    }

    private async Task Logout()
    {
        if (SingletoneUser != null)
        {
            await SingletoneUser.Logout();
            ToastService.ShowSuccess("Вы вышли из системы.");
            Navigation.NavigateTo("/Account/Login");
        }
    }
}