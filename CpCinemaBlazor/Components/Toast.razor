@using CpCinemaBlazor.ApiRequest;
@inject ToastService ToastService
@rendermode RenderMode.InteractiveServer

@if (ShowMessage)
{
    <div class="toast-message-container">
        <div class="toast-message-box @MessageTypeClass">
            <span class="toast-message-content">@MessageContent</span>
            <button class="toast-close-button" @onclick="HideMessage">x</button>
        </div>
    </div>
}
@code {
    private bool ShowMessage { get; set; } = false;
    private string MessageContent { get; set; } = string.Empty;
    private string MessageType { get; set; } = "success"; // default to success
    public int DismissAfter { get; set; } = 3;
    private string MessageTypeClass => MessageType switch
    {
        "success" => "toast-message-success",
        "failure" => "toast-message-failure",
        "alert" => "toast-message-alert",
        "warning" => "toast-message-warning",
        _ => "toast-message-default"
    };
    protected override async Task OnParametersSetAsync()
    {
        if (ShowMessage && DismissAfter > 0)
        {
            await Task.Delay(DismissAfter * 1000);
            HideMessage();
        }
    }
    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideMessage;
    }
    private async void ShowToast(string message, string type, int dismissAfter)
    {
        MessageContent = message;
        MessageType = type;
        ShowMessage = true;
        await InvokeAsync(StateHasChanged); // Ensure the UI updates
        if (dismissAfter > 0)
        {
            await Task.Delay(dismissAfter * 1000);
            HideMessage();
        }
    }
    private void HideMessage()
    {
        ShowMessage = false;
        InvokeAsync(StateHasChanged); // Ensure the UI updates
    }
    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideMessage;
    }
}

<style>
    .toast-message-container {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 300px;
    z-index: 1000;
    animation: slide-in 0.5s ease-out, slide-out 0.5s ease-in 5s forwards;
}

.toast-message-box {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    border-radius: 5px;
    color: white;
    font-weight: bold;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    margin-bottom: 10px;
}

.toast-message-success {
    background-color: #28a745;
}

.toast-message-failure {
    background-color: #dc3545;
}

.toast-message-alert {
    background-color: #ffc107;
    color: #212529;
}

.toast-message-warning {
    background-color: #ff8800;
}

.toast-message-default {
    background-color: #17a2b8;
}

.toast-close-button {
    background: none;
    border: none;
    color: white;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

    .toast-close-button:hover {
        color: #000;
    }
</style>